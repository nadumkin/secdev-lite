{
	"@programName": "ZAP",
	"@version": "2.16.1",
	"@generated": "Wed, 29 Oct 2025 12:20:45",
	"created": "2025-10-29T12:20:45.087790732Z",
	"site":[ 
		{
			"@name": "https://localhost:8080",
			"@host": "localhost",
			"@port": "8080",
			"@ssl": "true",
			"alerts": [ 
			]
		},
		{
			"@name": "http://localhost:8080",
			"@host": "localhost",
			"@port": "8080",
			"@ssl": "false",
			"alerts": [ 
				{
					"pluginid": "43",
					"alertRef": "43",
					"alert": "Source Code Disclosure - File Inclusion",
					"name": "Source Code Disclosure - File Inclusion",
					"riskcode": "3",
					"confidence": "2",
					"riskdesc": "High (Medium)",
					"desc": "<p>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.</p><p></p><p>Most web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.</p><p></p><p>The most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.</p><p></p><p>Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.</p>",
					"instances":[ 
						{
							"id": "49",
							"uri": "http://localhost:8080/echo?x",
							"method": "GET",
							"param": "x",
							"attack": "echo",
							"evidence": "",
							"otherinfo": "The output for the source code filename [echo] differs sufficiently from that of the random parameter [ijvnresaaphxxqdtvbcamoydjwppemtldfztyj], at [59%], compared to a threshold of [75%]"
						}
					],
					"count": "1",
					"solution": "<p>Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</p><p></p><p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"</p><p></p><p>For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.</p><p></p><p>Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. </p><p></p><p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.</p><p></p><p>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.</p><p></p><p>Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</p><p></p><p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</p><p></p><p>Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.</p><p></p><p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.</p><p></p><p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.</p><p></p>",
					"otherinfo": "<p>The output for the source code filename [echo] differs sufficiently from that of the random parameter [ijvnresaaphxxqdtvbcamoydjwppemtldfztyj], at [59%], compared to a threshold of [75%]</p>",
					"reference": "<p>https://owasp.org/www-community/attacks/Path_Traversal</p><p>https://cwe.mitre.org/data/definitions/22.html</p>",
					"cweid": "541",
					"wascid": "33",
					"sourceid": "674"
				},
				{
					"pluginid": "10038",
					"alertRef": "10038-1",
					"alert": "Content Security Policy (CSP) Header Not Set",
					"name": "Content Security Policy (CSP) Header Not Set",
					"riskcode": "2",
					"confidence": "3",
					"riskdesc": "Medium (High)",
					"desc": "<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>",
					"instances":[ 
						{
							"id": "13",
							"uri": "http://localhost:8080",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "1",
							"uri": "http://localhost:8080/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "44",
							"uri": "http://localhost:8080/?q=ZAP",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "34",
							"uri": "http://localhost:8080/echo?x",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "20",
							"uri": "http://localhost:8080/echo?x=%3Cscript%3Ealert(1)%3C/script%3E",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "5",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP</p><p>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</p><p>https://www.w3.org/TR/CSP/</p><p>https://w3c.github.io/webappsec-csp/</p><p>https://web.dev/articles/csp</p><p>https://caniuse.com/#feat=contentsecuritypolicy</p><p>https://content-security-policy.com/</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "9"
				},
				{
					"pluginid": "10106",
					"alertRef": "10106",
					"alert": "HTTP Only Site",
					"name": "HTTP Only Site",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>The site is only served under HTTP and not HTTPS.</p>",
					"instances":[ 
						{
							"id": "50",
							"uri": "http://localhost:8080",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "Failed to connect.\nZAP attempted to connect via: https://localhost:8080"
						}
					],
					"count": "1",
					"solution": "<p>Configure your web or application server to use SSL (https).</p>",
					"otherinfo": "<p>Failed to connect.</p><p>ZAP attempted to connect via: https://localhost:8080</p>",
					"reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html</p><p>https://letsencrypt.org/</p>",
					"cweid": "311",
					"wascid": "4",
					"sourceid": "775"
				},
				{
					"pluginid": "10020",
					"alertRef": "10020-1",
					"alert": "Missing Anti-clickjacking Header",
					"name": "Missing Anti-clickjacking Header",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.</p>",
					"instances":[ 
						{
							"id": "11",
							"uri": "http://localhost:8080",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "0",
							"uri": "http://localhost:8080/",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "39",
							"uri": "http://localhost:8080/?q=ZAP",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "30",
							"uri": "http://localhost:8080/echo?x",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "16",
							"uri": "http://localhost:8080/echo?x=%3Cscript%3Ealert(1)%3C/script%3E",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "5",
					"solution": "<p>Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.</p><p>If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/X-Frame-Options</p>",
					"cweid": "1021",
					"wascid": "15",
					"sourceid": "9"
				},
				{
					"pluginid": "90004",
					"alertRef": "90004-1",
					"alert": "Insufficient Site Isolation Against Spectre Vulnerability",
					"name": "Insufficient Site Isolation Against Spectre Vulnerability",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.</p>",
					"instances":[ 
						{
							"id": "35",
							"uri": "http://localhost:8080",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "5",
							"uri": "http://localhost:8080/",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "33",
							"uri": "http://localhost:8080/echo?x=%3Cscript%3Ealert(1)%3C/script%3E",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "21",
							"uri": "http://localhost:8080/healthz",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "37",
							"uri": "http://localhost:8080",
							"method": "GET",
							"param": "Cross-Origin-Embedder-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "6",
							"uri": "http://localhost:8080/",
							"method": "GET",
							"param": "Cross-Origin-Embedder-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "36",
							"uri": "http://localhost:8080/echo?x=%3Cscript%3Ealert(1)%3C/script%3E",
							"method": "GET",
							"param": "Cross-Origin-Embedder-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "38",
							"uri": "http://localhost:8080",
							"method": "GET",
							"param": "Cross-Origin-Opener-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "7",
							"uri": "http://localhost:8080/",
							"method": "GET",
							"param": "Cross-Origin-Opener-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "41",
							"uri": "http://localhost:8080/echo?x=%3Cscript%3Ealert(1)%3C/script%3E",
							"method": "GET",
							"param": "Cross-Origin-Opener-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "10",
					"solution": "<p>Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages.</p><p>'same-site' is considered as less secured and should be avoided.</p><p>If resources must be shared, set the header to 'cross-origin'.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https://caniuse.com/mdn-http_headers_cross-origin-resource-policy).</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Cross-Origin-Embedder-Policy</p>",
					"cweid": "693",
					"wascid": "14",
					"sourceid": "9"
				},
				{
					"pluginid": "10063",
					"alertRef": "10063-1",
					"alert": "Permissions Policy Header Not Set",
					"name": "Permissions Policy Header Not Set",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.</p>",
					"instances":[ 
						{
							"id": "31",
							"uri": "http://localhost:8080",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "4",
							"uri": "http://localhost:8080/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "48",
							"uri": "http://localhost:8080/?q=ZAP",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "43",
							"uri": "http://localhost:8080/echo?x",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "29",
							"uri": "http://localhost:8080/echo?x=%3Cscript%3Ealert(1)%3C/script%3E",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "5",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Permissions-Policy</p><p>https://developer.chrome.com/blog/feature-policy/</p><p>https://scotthelme.co.uk/a-new-security-header-feature-policy/</p><p>https://w3c.github.io/webappsec-feature-policy/</p><p>https://www.smashingmagazine.com/2018/12/feature-policy/</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "9"
				},
				{
					"pluginid": "10021",
					"alertRef": "10021",
					"alert": "X-Content-Type-Options Header Missing",
					"name": "X-Content-Type-Options Header Missing",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</p>",
					"instances":[ 
						{
							"id": "18",
							"uri": "http://localhost:8080",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "2",
							"uri": "http://localhost:8080/",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "46",
							"uri": "http://localhost:8080/?q=ZAP",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "40",
							"uri": "http://localhost:8080/echo?x",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "26",
							"uri": "http://localhost:8080/echo?x=%3Cscript%3Ealert(1)%3C/script%3E",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "15",
							"uri": "http://localhost:8080/healthz",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						}
					],
					"count": "6",
					"solution": "<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</p>",
					"otherinfo": "<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.</p><p>At \"High\" threshold this scan rule will not alert on client or server error responses.</p>",
					"reference": "<p>https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)</p><p>https://owasp.org/www-community/Security_Headers</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "9"
				},
				{
					"pluginid": "10049",
					"alertRef": "10049-3",
					"alert": "Storable and Cacheable Content",
					"name": "Storable and Cacheable Content",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.</p>",
					"instances":[ 
						{
							"id": "24",
							"uri": "http://localhost:8080",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "3",
							"uri": "http://localhost:8080/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "47",
							"uri": "http://localhost:8080/?q=ZAP",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "42",
							"uri": "http://localhost:8080/echo?x",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "28",
							"uri": "http://localhost:8080/echo?x=%3Cscript%3Ealert(1)%3C/script%3E",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "19",
							"uri": "http://localhost:8080/healthz",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "10",
							"uri": "http://localhost:8080/robots.txt",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "32",
							"uri": "http://localhost:8080/script",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "9",
							"uri": "http://localhost:8080/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						}
					],
					"count": "9",
					"solution": "<p>Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:</p><p>Cache-Control: no-cache, no-store, must-revalidate, private</p><p>Pragma: no-cache</p><p>Expires: 0</p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.</p>",
					"otherinfo": "<p>In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.</p>",
					"reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
					"cweid": "524",
					"wascid": "13",
					"sourceid": "9"
				},
				{
					"pluginid": "10031",
					"alertRef": "10031",
					"alert": "User Controllable HTML Element Attribute (Potential XSS)",
					"name": "User Controllable HTML Element Attribute (Potential XSS)",
					"riskcode": "0",
					"confidence": "1",
					"riskdesc": "Informational (Low)",
					"desc": "<p>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.</p>",
					"instances":[ 
						{
							"id": "45",
							"uri": "http://localhost:8080/?q=ZAP",
							"method": "GET",
							"param": "q",
							"attack": "",
							"evidence": "",
							"otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\n\nhttp://localhost:8080/?q=ZAP\n\nappears to include user input in:\na(n) [input] tag [value] attribute\n\nThe user input found was:\nq=ZAP\n\nThe user-controlled value was:\nzap"
						}
					],
					"count": "1",
					"solution": "<p>Validate all input and sanitize output it before writing to any HTML attributes.</p>",
					"otherinfo": "<p>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:</p><p></p><p>http://localhost:8080/?q=ZAP</p><p></p><p>appears to include user input in:</p><p>a(n) [input] tag [value] attribute</p><p></p><p>The user input found was:</p><p>q=ZAP</p><p></p><p>The user-controlled value was:</p><p>zap</p>",
					"reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html</p>",
					"cweid": "20",
					"wascid": "20",
					"sourceid": "20"
				}
			]
		}
	],
	"sequences":[
	]

}
